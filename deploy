#!/bin/bash

# This script populates the directory ABOVE the repository root with the
# deployed software and the output directory.
#
# Suppose the filesystem looked like this:
# aws-object-search
# └── git
#
# After running "./git/deploy SUFFIX", the filesystem would look like this.
# aws-object-search
# ├── aws-object-search-SUFFIX
# ├── micromamba
# ├── git
# └── s3_objects
#
# The default SUFFIX is "dev".

set -euo pipefail
# set -x

PYTHON_VERSION=3.13

main() {
    THIS_SCRIPT="${BASH_SOURCE[0]}"
    SUFFIX=${1:-dev}

    # Resolve the absolute path to the directory containing the script
    REPO_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

    if [[ -z "${__SANITIZED_ENV:+x}" ]]; then
        # If not already in a sanitized environment, run the script in a sanitized environment
        echo "Sanitizing environment"
        exec "$REPO_DIR"/scripts/sanitize-command "$THIS_SCRIPT" "$@"
    else
        # If already in a sanitized environment, just run the script
        echo "Running in a sanitized environment:"
        cd  # $HOME
        deploy "$REPO_DIR" $SUFFIX
    fi
}

# Define deploy function with argument
deploy() {
    local REPO_DIR="$1"
    local SUFFIX="$2"
    echo "Running deploy() in $(pwd) with SUFFIX=$SUFFIX"
    env
    echo
    TARGET_ENV="$PWD/aws-object-search-$SUFFIX"
    # Phase 1: Get micromamba.
    bash "$REPO_DIR"/scripts/fetch-micromamba.sh
    # Phase 2: Create deployment environment.
    ./micromamba create -y -p "$TARGET_ENV" python=$PYTHON_VERSION uv
    # Phase 3: Populate deployment environment with applicatien.
    export PATH="$TARGET_ENV"/bin:$PATH
    if [[ $SUFFIX == "dev" ]]; then
        EDITABLE="-e"
    else
        EDITABLE=""
    fi
    echo uv pip install --system $EDITABLE "$REPO_DIR"
    uv pip install --system $EDITABLE "$REPO_DIR"
    # Phase 4: create output directory.
    mkdir -p s3_objects
}

main "$@"
