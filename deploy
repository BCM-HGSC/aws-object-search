#!/bin/bash

# This script populates the directory ABOVE the repository root with the
# deployed software and the output directory.
#
# This script does not have any dependencies beyond posix and curl. It downloads
# micromamba, uses micromamba to create a standalone Python deployment
# containing the "uv" tool, and then uses "uv pip install" to install the
# software.
#
# Suppose the filesystem looked like this:
# aws-object-search
# └── git
#     ├── deploy
#     └── ...
#
# After running "./git/deploy SUFFIX", the filesystem would look like this.
# aws-object-search
# ├── aws-object-search-SUFFIX
# ├── micromamba
# ├── git
# └── s3_objects
#
# The default SUFFIX is "dev".

set -euo pipefail
# set -x

PYTHON_VERSION=3.13

# Resolve the absolute path to the directory containing the script
REPO_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Set default values
SUFFIX="dev"


main() {
    parse_args "$@"
    THIS_SCRIPT="${BASH_SOURCE[0]}"
    if [[ -z "${__SANITIZED_ENV:+x}" ]]; then
        # If not already in a sanitized environment, run the script in a sanitized environment
        echo "Sanitizing environment"
        exec "$REPO_DIR"/scripts/sanitize-command "$THIS_SCRIPT" "$@"
    else
        # If already in a sanitized environment, just run the script
        echo "Running in a sanitized environment:"
        cd  # $HOME
        echo "REPO_DIR: $REPO_DIR"
        echo "SUFFIX:   $SUFFIX"
        export HOME="$PWD"
        deploy
    fi
}


parse_args() {
    # Variable to track if SUFFIX has been set
    local SUFFIX_SET=false

    # Parse command line options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -*)
                echo "Unknown option $1" >&2
                show_usage >&2
                exit 1
                ;;
            *)
                # This is the positional parameter for SUFFIX
                if [[ "$SUFFIX_SET" == true ]]; then
                    echo "Error: Too many arguments. Only one positional parameter (SUFFIX) is allowed." >&2
                    show_usage >&2
                    exit 1
                fi
                SUFFIX="$1"
                SUFFIX_SET=true
                shift
                ;;
        esac
    done
}


show_usage() {
    echo "Usage: $0 [-p|--prefix PREFIX] [-h|--help] [SUFFIX]"
    echo ""
    echo "Options:"
    echo "  -p, --prefix PREFIX    Set prefix value (default: '..')"
    echo "  -h, --help            Show this help message"
    echo ""
    echo "Arguments:"
    echo "  SUFFIX                Set suffix value (default: 'dev')"
    echo ""
    echo "Examples:"
    echo "  $0                    # Use defaults"
    echo "  $0 -p /home/user      # Set prefix only"
    echo "  $0 prod               # Set suffix only"
    echo "  $0 --prefix /opt staging  # Set both prefix and suffix"
}


deploy() {
    echo "Running deploy() in $PWD with SUFFIX=$SUFFIX"
    echo
    echo "env:"
    env
    echo
    TARGET_ENV="$PWD/aws-object-search-$SUFFIX"
    echo TARGET_ENV=$TARGET_ENV

    # Phase 1: Get micromamba.
    bash "$REPO_DIR"/scripts/fetch-micromamba.sh
    # Phase 2: Create deployment environment.
    ./micromamba create -y -p "$TARGET_ENV" python=$PYTHON_VERSION uv
    # Phase 3: Populate deployment environment with applicatien.
    export PATH="$TARGET_ENV"/bin:$PATH
    if [[ $SUFFIX == "dev" ]]; then
        EDITABLE="-e"
    else
        EDITABLE=""
    fi
    echo uv pip install --system $EDITABLE "$REPO_DIR"
    uv pip install --system $EDITABLE "$REPO_DIR"
    # Phase 4: create output directory.
    mkdir -p s3_objects
}

main "$@"
